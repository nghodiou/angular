var formsappBaseUrl;
var formsappIsPreview;

if (typeof formsappIcons === 'undefined') {
	formsappIcons = {
		message: '<svg class="icon-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Pro 5.15.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) --><path d="M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z"/></svg> <svg class="icon-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Pro 5.15.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) --><path d="M448 0H64C28.7 0 0 28.7 0 64v288c0 35.3 28.7 64 64 64h96v84c0 9.8 11.2 15.5 19.1 9.7L304 416h144c35.3 0 64-28.7 64-64V64c0-35.3-28.7-64-64-64zM288 264c0 4.4-3.6 8-8 8H136c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h144c4.4 0 8 3.6 8 8v16zm96-96c0 4.4-3.6 8-8 8H136c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h240c4.4 0 8 3.6 8 8v16z"/></svg>'
	};
}

function formsapp(formId, embedType, options, _baseUrl, _isPreview) {
	this.formId = formId;
	formsappBaseUrl = _baseUrl || 'https://embed.forms.app';
	formsappIsPreview = _isPreview || false;
	this.options = options;
	this.embedType = embedType;
	this.formFrame = formsappCreateIframeBase(this);
	this.isOpen = false;
	this.embed = new embedTypes[embedType](this);
	this.lastAction = null;

	let isCssLoaded = false;

	formsappLoadCss('embed', () => {
		isCssLoaded = true;
		setTimeout(() => {
			if (this.embed.setOptions) {
				this.embed.setOptions(this.options);
			}

			if (this.lastAction) {
				this.lastAction();
				this.lastAction = null;
			}
		}, 100);
	});

	this.wrapContent = (id = formId) => {
		if (this.formFrame.contentWindow) {
			setTimeout(() => {
				this.formFrame.contentWindow.postMessage('wrapContent', '*');
			}, 100);
		}
	};

	this.open = () => {
		if (!isCssLoaded) {
			this.lastAction = this.open;
			return;
		}

		if (this.embed.open && !this.isOpen) {
			if (this.embed.setOptions) {
				this.embed.setOptions(this.options);
			}
			this.embed.open();
			this.isOpen = true;
			if (this.options.overlay) {
				this.overlay = formsappCreateOverlay(this);
			}
		}
	};

	this.close = () => {
		if (!isCssLoaded) {
			this.lastAction = this.open;
			return;
		}

		if (this.embed.close && this.isOpen) {
			this.embed.close();
			this.isOpen = false;
			if (this.overlay) {
				if (this.options.openingAnimation || this.embedType === 'slider') {
					setTimeout(() => {
						this.overlay.remove();
						this.overlay = null;
					}, (this.embedType === 'slider' ? 250 : 750));
				} else {
					this.overlay.remove();
					this.overlay = null;
				}
			}
		}

		if (this.onclose) {
			this.onclose();
		}
	};

	this.toggle = () => {
		this.isOpen ? this.close() : this.open();
	};

	this.setOptions = (newOptions) => {
		this.options = newOptions;
		formsappResetIframeStyleClass(this.formFrame, embedType, this.isOpen);

		if (this.embed.setOptions) {
			this.embed.setOptions(this.options);
		}

		if (this.options.overlay && this.isOpen) {
			this.overlay = this.overlay || formsappCreateOverlay(this);
			this.overlay.style.backgroundColor = this.options.overlay;
		} else if (this.overlay) {
			this.overlay.remove();
			this.overlay = null;
		}

		let opacity = 1;
		if (this.options.opacity !== undefined) {
			opacity = this.options.opacity;
		}

		if (this.formFrame.contentWindow) {
			this.formFrame.contentWindow.postMessage('setOpacity:' + opacity, '*');
		}
	};

	if (this.embed.isAutoOpen) {
		this.open();
	}

	if (options.autoOpen) {
		let actions = {
			aftersettime: () => {
				setTimeout(() => {
					this.open();
				}, options.autoOpen.setTimeSeconds * 1000);
			},
			onpageload: () => {
				this.open();
			}
		}
		actions[options.autoOpen.action]();
	}

	const events = {
		redirect: (url) => {
			window.location.href = url;
		},
		designSettings: (designSettings) => {
			this.designSettings = designSettings;
			if (this.onDesignSettingsChanged) {
				this.onDesignSettingsChanged();
			}
		},
		formSubmitted: (record) => {
			if (this.onSubmit) {
				this.onSubmit(record);
			}
		},
		setOptions: this.setOptions,
		closePopup: () => {
			this.close();
		},
		addScript: (scriptConfig) => {
			eval(scriptConfig.script)(...scriptConfig.params);
		}
	};

	this.getHeight = () => {
		this.formFrame.contentWindow.postMessage('getHeight', '*');
	};

	this.scrollTo = (top) => {
		this.formFrame.contentWindow.postMessage('scrollTo:' + top, '*');
	};

	this.destroy = () => {
		if (this.formFrame) {
			this.formFrame.remove();
		}

		if (this.embed.destroy) {
			this.embed.destroy();
		}

		let embedJS = document.querySelector(`script[src="${formsappBaseUrl}/static/embed.js"]`);
		let embedCSS = document.querySelector(`link[href="${formsappBaseUrl}/static/embed.css"]`);

		if (embedCSS) {
			embedCSS.remove();
		}

		if (embedJS) {
			embedJS.remove();
		}
	};

	var formsappEventMethod = this.formFrame.addEventListener ? 'addEventListener' : 'attachEvent';
	var formsappEventer = this.formFrame[formsappEventMethod];
	var formsappMessageEvent = formsappEventMethod === 'attachEvent' ? 'onmessage' : 'message';
	formsappEventer(formsappMessageEvent, (e) => {
		let eData = e.data || e.message;
		if (eData && eData.indexOf) {
			eData = eData.replace('formsapp-', '');

			let method;
			let params;

			let definationIndex = eData.indexOf(':');

			if (definationIndex > -1) {
				method = eData.substring(0, definationIndex);
				let value = eData.substring(definationIndex + 1, eData.length);
				params = value;
				try {
					params = JSON.parse(params);
				} catch {}
			} else {
				method = eData;
			}

			const event = events[method] || this.embed[method];
			if (event) {
				event(params);
			}
		}
	});

	return this;
};

function formsappCreateOverlay(formsapp) {
	let overlay = document.createElement('div');
	overlay.style = 'position: fixed; height: 100vh; width: 100vw; left: 0; top: 0; display: block; z-index: 999998;';
	document.body.append(overlay);
	overlay.style.backgroundColor = formsapp.options.overlay;
	overlay.addEventListener('click', formsapp.close);
	return overlay;
};

function formsappCreateIframeBase(formsapp) {
	let formIframe = document.createElement('iframe');
	formIframe.allow = 'geolocation; microphone; camera;';
	formIframe.src = `${formsappBaseUrl}/form/` + formsapp.formId + (formsappIsPreview ? `?localData=true` : `?utm_source=embed-${formsapp.embedType}`);
	formIframe.allowFullscreen = 'true';
	formIframe.allowtransparency = 'true';
	formIframe.style.zIndex = 999999;

	if (formsapp.options) {
		const answers = formsapp.options.answers;

		if (answers) {
			let answersParams = '';
			for (let answer in answers) {
				answersParams += answersParams ? '&' : '#';
				answersParams += `${answer}=${answers[answer]}`;
			}
			formIframe.src += answersParams;
		}
	}

	formsappResetIframeStyleClass(formIframe, formsapp.embedType, formsapp.isOpen);

	return formIframe;
};

function formsappResetIframeStyleClass(formIframe, embedType, isOpen) {
	formIframe.setAttribute('class', 'formsapp-iframe ' + embedType + (isOpen ? ' open' : ''));
}

if (typeof embedTypes === 'undefined') {
	var embedTypes = {
		standard: function (formsapp) {
			const formId = formsapp.formId;
			const formIframe = formsapp.formFrame;
			let formsappPopupOpened = false;
			let formsapplastHeight;
			let formsappInterval;
			let formsappLastScrollY;
			let formsappLastFormScrollTop;
			let containers = document.querySelectorAll(`[formsappId="${formId}"]`);
			this.setOptions = (options) => {
				if (options && options.height && options.height !== 'formHeight') {
					formIframe.style.height = options.height;
				}
				if (options && options.width) {
					formIframe.style.width = options.width;
				}
			};
			this.setOptions(formsapp.options);
			for (let container of containers) {
				if (!container.innerHTML) {
					container.appendChild(formIframe);
				}
			}
			this.isAutoOpen = true;
			this.open = () => {};
			this.setHeight = (jsonData) => {
				if ((formsapp.options && formsapp.options.height !== 'formHeight') || formsappPopupOpened) {
					return;
				}
				if (formIframe) {
					formIframe.style.height = jsonData.height + 'px';
					if (jsonData.initHeight) {
						if (formsapplastHeight === jsonData.height) {
							clearInterval(formsappInterval);
							formsappInterval = null;
						} else if (!formsappInterval) {
							formsappInterval = setInterval(() => {
								formsapp.getHeight(jsonData.id);
							}, 100);
						}
					}
					formsapplastHeight = jsonData.height;
				}
			};
			this.popup = (jsonData) => {
				if (jsonData.status === 'open') {
					formsapplastHeight = formIframe.style.height;
					formsappLastScrollY = window.scrollY;
					formsappPopupOpened = true;
					formsappLastFormScrollTop = jsonData.scrollTop;
					formIframe.style.height = window.outerHeight + 'px';
					window.scrollTo(0, formIframe.offsetTop);
				} else {
					formsappPopupOpened = false;
					formIframe.style.height = formsapplastHeight;
					setTimeout(() => {
						window.scrollTo(0, formsappLastScrollY);
						formsapp.scrollTo(jsonData.id, formsappLastFormScrollTop);
					}, 100);
				}
			}
			return this;
		},
		fullscreen: function (formsapp) {
			const formId = formsapp.formId;
			const formIframe = formsapp.formFrame;
			let container = document.querySelector(`[formsappId="${formId}"]`);
			container.appendChild(formIframe);
			this.isAutoOpen = true;
			this.open = () => {};
			return this;
		},
		popover: function (formsapp) {
			const formId = formsapp.formId;
			const formIframe = formsapp.formFrame;
			let button;
			let isIframeLoaded = document.querySelector('.formsapp-iframe.popover');
			this.setOptions = (options) => {
				if (options.button) {
					button = document.querySelector(`[formsappId="${formId}"]`);
					const isAlreadyLoaded = !!button;
					if (!isAlreadyLoaded) {
						button = document.createElement('button');
						button.setAttribute('formsappId', formId);
					}
					button.setAttribute('class', 'formsapp-button formsapp-popover-button ' + options.align + (formsapp.isOpen ? ' open' : ''));
					button.style.backgroundColor = options.button.color;
					button.style.color = formsappGetTextColor(options.button.color) > 127 ? 'black' : 'white';
					const icon = options.button.icon || formsappIcons.message;
					button.innerHTML = icon;
					button.addEventListener('click', formsapp.toggle);
					if (!isAlreadyLoaded) {
						document.body.appendChild(button);
					}
				}
				if (!isIframeLoaded) {
					document.body.appendChild(formIframe);
					isIframeLoaded = true;
				}
				formIframe.classList.add(options.align);
			};
			this.open = () => {
				formIframe.classList.add('open');
				if (button) {
					button.classList.add('open');
				}
			};
			this.close = () => {
				formIframe.classList.remove('open');
				if (button) {
					button.classList.remove('open');
				}
			};
			return this;
		},
		sidetab: function (formsapp) {
			const formId = formsapp.formId;
			const formIframe = formsapp.formFrame;
			let button;
			let wrapper = document.createElement('div');
			wrapper.classList.add('formsapp-sidetab-wrapper');
			this.setOptions = (options) => {
				let wrapperClass = ''
				if (options.wrapperClass) {
					wrapperClass = options.wrapperClass + ' ';
				}
				if (options.button) {
					button = document.querySelector(`[formsappId="${formId}"]`);
					const isAlreadyLoaded = !!button;
					if (!isAlreadyLoaded) {
						button = document.createElement('button');
						button.setAttribute('formsappId', formId);
					}
					options.align.horizontal = options.align.horizontal || 'right';
					options.align.vertical = options.align.vertical || 'middle';
					button.setAttribute('class', 'formsapp-button formsapp-sidetab-button ' + options.align.horizontal + ' ' + options.align.vertical + (formsapp.isOpen ? ' open' : ''));
					formIframe.setAttribute('class', 'formsapp-iframe ' + 'sidetab ' + options.align.horizontal + ' ' + options.align.vertical + (formsapp.isOpen ? ' open' : ''));
					wrapper.setAttribute('class', 'formsapp-sidetab-wrapper ' + wrapperClass + options.align.horizontal + ' ' + options.align.vertical + (formsapp.isOpen ? ' open' : ''));
					button.style.backgroundColor = options.button.color;
					const icon = options.button.icon || formsappIcons.message;
					button.innerHTML = icon + options.button.text;
					if (!options.button.textColor) {
						button.style.color = formsappGetTextColor(options.button.color) > 127 ? 'black' : 'white';
					} else {
						button.style.color = options.button.textColor;
					}
					button.addEventListener('click', formsapp.toggle);
					formIframe.style.width = options.width;
					formIframe.style.height = options.height;
					if (!isAlreadyLoaded) {
						wrapper.appendChild(button);
						wrapper.appendChild(formIframe);
						document.body.append(wrapper);
					}
				}
			};
			this.open = () => {
				formIframe.classList.add('open');
				wrapper.classList.add('open');
				if (button) {
					button.classList.add('open');
				}
			};
			this.close = () => {
				formIframe.classList.remove('open');
				wrapper.classList.remove('open');
				if (button) {
					button.classList.remove('open');
				}
			};
			this.destroy = () => {
				if (button) {
					button.remove();
				}
				if (wrapper) {
					wrapper.remove();
				}
			};
			return this;
		},
		popup: function (formsapp) {
			const formId = formsapp.formId;
			const formIframe = formsapp.formFrame;

			this.popup = null;
			this.popupContent = null;

			let entrance;
			let exit;
			this.setOptions = (options) => {
				if (options.button) {
					let buttons = document.querySelectorAll(`[formsappId="${formId}"]`);
					if (buttons) {
						for (let button of buttons) {
							button.classList.add('formsapp-button');
							button.classList.add('formsapp-popup-button');
							button.style.backgroundColor = options.button.color;
							button.innerHTML = options.button.text;
							button.style.color = formsappGetTextColor(options.button.color) > 127 ? 'black' : 'white';
							button.onclick = formsapp.open;
						}
					}
				}

				if (!this.popup) {
					let popupObj = new formsappCreatePopup(formsapp);
					this.popup = popupObj.popup;
					this.popupContent = popupObj.popupContent;
				}

				if (options && options.openingAnimation) {
					entrance = options.openingAnimation.entrance;
					exit = options.openingAnimation.exit;
					if (!formsapp.isOpen && formsappIsPreview) {
						this.open();
					}
				}
				if (this.popup) {
					this.popup.popup.style.width = options.width;
				}
				if (options && options.height && options.height !== 'formHeight') {
					formIframe.style.height = options.height;
				}
				if (options.autoOpen && !formsapp.isOpen && formsappIsPreview) {
					this.open();
				}
				formsappLoadCss('embed-animation');
			};
			this.open = () => {
				this.popupContent.setAttribute('class', 'formsapp-popup-content formsapp-animate__animated ' + entrance);
				this.popup.popup.classList.add('open');
				formIframe.focus();
				setTimeout(() => {
					formIframe.contentWindow.postMessage('escEventAdder', '*');
				}, 500);
				formsapp.isOpen = true;
				formsapp.wrapContent();
			};
			this.close = () => {
				this.popupContent.setAttribute('class', 'formsapp-popup-content formsapp-animate__animated ' + exit);
				formIframe.contentWindow.postMessage('escEventRemover', '*');
				if (entrance && exit) {
					setTimeout(() => {
						this.popup.popup.classList.remove('open');
					}, 750);
				} else {
					this.popup.popup.classList.remove('open');
				}
				formsapp.isOpen = false;
			};
			this.destroy = () => {
				if (this.popup) {
					this.popup.remove();
				}
			};
			return this;
		},
		slider: function (formsapp) {
			const formId = formsapp.formId;
			const formIframe = formsapp.formFrame;

			this.popup = null;
			this.popupContent = null;
			this.popupAlign = null;

			this.setOptions = (options) => {
				if (options.button) {
					let buttons = document.querySelectorAll(`[formsappId="${formId}"]`);
					if (buttons) {
						for (let button of buttons) {
							button.classList.add('formsapp-button');
							button.classList.add('formsapp-popup-button');
							button.style.backgroundColor = options.button.color;
							button.innerHTML = options.button.text;
							button.style.color = formsappGetTextColor(options.button.color) > 127 ? 'black' : 'white';
							button.onclick = formsapp.open;
						}
					}
				}

				if (!this.popup) {
					let popupObj = new formsappCreatePopup(formsapp);
					this.popup = popupObj.popup;
					this.popupContent = popupObj.popupContent;
				}

				if (this.popup) {
					this.popupAlign = options.align.charAt(0).toUpperCase() + options.align.slice(1);
					this.popup.setClass(options.align);
					this.popup.popup.style.width = options.width;
				}
				if (this.popupContent) {
					this.popupContent.setAttribute('class', 'formsapp-popup-content formsapp-animate__animated');
				}
				if (options && options.height && options.height !== 'formHeight') {
					formIframe.style.height = options.height;
				}
				formsappLoadCss('embed-animation');
			};
			this.open = () => {
				this.popupContent.setAttribute('class', 'formsapp-popup-content formsapp-animate__animated formsapp-animate__fadeIn' + this.popupAlign + 'Big');
				this.popup.popup.classList.add('open');
				setTimeout(() => {
					formIframe.focus();
					formIframe.contentWindow.postMessage('escEventAdder', '*');
					formsapp.wrapContent();
				}, 500);
			};
			this.close = () => {
				this.popupContent.setAttribute('class', 'formsapp-popup-content formsapp-animate__animated formsapp-animate__fadeOut' + this.popupAlign + 'Big');
				formIframe.contentWindow.postMessage('escEventRemover', '*');
				setTimeout(() => {
					this.popup.popup.classList.remove('open');
				}, 750);
			};
			return this;
		}
	};
}

function formsappLoadCss(cssType, callback) {
	let cssId = 'formsapp-' + cssType;
	let css = document.getElementById(cssId);
	if (!css) {
		let head = document.getElementsByTagName('head')[0];
		let link = document.createElement('link');
		link.id = cssId;
		link.rel = 'stylesheet';
		link.type = 'text/css';
		link.href = formsappBaseUrl + `/static/${cssType}.css`;
		link.media = 'all';
		link.onload = callback;
		head.append(link);
	} else if (callback) {
		callback();
	}
};

function formsappCreatePopup(formsapp, defaultClassName) {
	var popup;
	let popupContent;
	popup = document.createElement('div');
	popupContent = document.createElement('div');

	this.close = () => {
		popup.classList.remove('open');
		// popup.remove();
	};

	this.setClass = (className) => {
		popup.className = 'formsapp-popup';
		if (className) {
			popup.className += ' ' + className;
		}
		if (formsapp.isOpen) {
			popup.className += ' open';
		}
	};

	popupContent.className = 'formsapp-popup-content formsapp-animate__animated';

	const popupClose = document.createElement('div');
	popupClose.className = 'close-button';
	popupClose.innerHTML = '<svg width="13" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Pro 5.15.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) --><path d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"/></svg>'
	popupClose.addEventListener('click', formsapp.close);
	popupClose.style.color = 'black';

	formsapp.onDesignSettingsChanged = () => {
		popupClose.style.color = formsapp.designSettings.questionColor;
	};

	popupContent.append(popupClose);
	popup.append(popupContent);

	popupContent.append(formsapp.formFrame);

	document.body.append(popup);

	this.popup = popup;

	this.setClass(defaultClassName);

	this.destroy = () => {
		if (popup) {
			popup.remove();
		}
	};

	// this.setAnimation();
	return {
		popup: this,
		popupContent: popupContent
	};
}

function formsappGetTextColor(backgroundColor) {
	let r = 0;
	let g = 0;
	let b = 0;
	backgroundColor = '' + backgroundColor;
	let isHEX = backgroundColor.indexOf('#') === 0;
	let isRGB = backgroundColor.indexOf('rgb') === 0;
	if (isHEX) {
		const hasFullSpec = backgroundColor.length === 7;
		let m = backgroundColor.substr(1).match(hasFullSpec ? /(\S{2})/g : /(\S{1})/g);
		if (m) {
			r = parseInt(m[0] + (hasFullSpec ? '' : m[0]), 16);
			g = parseInt(m[1] + (hasFullSpec ? '' : m[1]), 16);
			b = parseInt(m[2] + (hasFullSpec ? '' : m[2]), 16);
		}
	}
	if (isRGB) {
		let m = backgroundColor.match(/(\d+){3}/g);
		if (m) {
			r = m[0];
			g = m[1];
			b = m[2];
		}
	}
	if (typeof r !== 'undefined') {
		return ((r * 299) + (g * 587) + (b * 114)) / 1000;
	}
}
